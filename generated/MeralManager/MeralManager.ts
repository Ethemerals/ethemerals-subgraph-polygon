// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AuthChange extends ethereum.Event {
  get params(): AuthChange__Params {
    return new AuthChange__Params(this);
  }
}

export class AuthChange__Params {
  _event: AuthChange;

  constructor(event: AuthChange) {
    this._event = event;
  }

  get auth(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get add(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChangeCMID extends ethereum.Event {
  get params(): ChangeCMID__Params {
    return new ChangeCMID__Params(this);
  }
}

export class ChangeCMID__Params {
  _event: ChangeCMID;

  constructor(event: ChangeCMID) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cmId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ChangeELF extends ethereum.Event {
  get params(): ChangeELF__Params {
    return new ChangeELF__Params(this);
  }
}

export class ChangeELF__Params {
  _event: ChangeELF;

  constructor(event: ChangeELF) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get elf(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get add(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChangeElement extends ethereum.Event {
  get params(): ChangeElement__Params {
    return new ChangeElement__Params(this);
  }
}

export class ChangeElement__Params {
  _event: ChangeElement;

  constructor(event: ChangeElement) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get element(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class ChangeHP extends ethereum.Event {
  get params(): ChangeHP__Params {
    return new ChangeHP__Params(this);
  }
}

export class ChangeHP__Params {
  _event: ChangeHP;

  constructor(event: ChangeHP) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hp(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get add(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChangeMax extends ethereum.Event {
  get params(): ChangeMax__Params {
    return new ChangeMax__Params(this);
  }
}

export class ChangeMax__Params {
  _event: ChangeMax;

  constructor(event: ChangeMax) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxHp(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get maxStamina(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ChangeStats extends ethereum.Event {
  get params(): ChangeStats__Params {
    return new ChangeStats__Params(this);
  }
}

export class ChangeStats__Params {
  _event: ChangeStats;

  constructor(event: ChangeStats) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get atk(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get def(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get spd(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ChangeXP extends ethereum.Event {
  get params(): ChangeXP__Params {
    return new ChangeXP__Params(this);
  }
}

export class ChangeXP__Params {
  _event: ChangeXP;

  constructor(event: ChangeXP) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get xp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get add(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContractRegistered extends ethereum.Event {
  get params(): ContractRegistered__Params {
    return new ContractRegistered__Params(this);
  }
}

export class ContractRegistered__Params {
  _event: ContractRegistered;

  constructor(event: ContractRegistered) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get meralType(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InitMeral extends ethereum.Event {
  get params(): InitMeral__Params {
    return new InitMeral__Params(this);
  }
}

export class InitMeral__Params {
  _event: InitMeral;

  constructor(event: InitMeral) {
    this._event = event;
  }

  get meralType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cmId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get elf(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get hp(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get atk(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get def(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get spd(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get element(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get subclass(): i32 {
    return this._event.parameters[9].value.toI32();
  }

  get owner(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class MeralOwnerChange extends ethereum.Event {
  get params(): MeralOwnerChange__Params {
    return new MeralOwnerChange__Params(this);
  }
}

export class MeralOwnerChange__Params {
  _event: MeralOwnerChange;

  constructor(event: MeralOwnerChange) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MeralStatusChange extends ethereum.Event {
  get params(): MeralStatusChange__Params {
    return new MeralStatusChange__Params(this);
  }
}

export class MeralStatusChange__Params {
  _event: MeralStatusChange;

  constructor(event: MeralStatusChange) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MeralManager__allMeralsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;
  value9: i32;
  value10: i32;
  value11: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32,
    value9: i32,
    value10: i32,
    value11: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    map.set(
      "value11",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value11))
    );
    return map;
  }
}

export class MeralManager__getMeralByContractAndTokenIdResultValue0Struct extends ethereum.Tuple {
  get cmId(): BigInt {
    return this[0].toBigInt();
  }

  get elf(): BigInt {
    return this[1].toBigInt();
  }

  get xp(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): i32 {
    return this[3].toI32();
  }

  get maxHp(): i32 {
    return this[4].toI32();
  }

  get atk(): i32 {
    return this[5].toI32();
  }

  get def(): i32 {
    return this[6].toI32();
  }

  get spd(): i32 {
    return this[7].toI32();
  }

  get maxStamina(): i32 {
    return this[8].toI32();
  }

  get element(): i32 {
    return this[9].toI32();
  }

  get subclass(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MeralManager__getMeralByIdResultValue0Struct extends ethereum.Tuple {
  get cmId(): BigInt {
    return this[0].toBigInt();
  }

  get elf(): BigInt {
    return this[1].toBigInt();
  }

  get xp(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): i32 {
    return this[3].toI32();
  }

  get maxHp(): i32 {
    return this[4].toI32();
  }

  get atk(): i32 {
    return this[5].toI32();
  }

  get def(): i32 {
    return this[6].toI32();
  }

  get spd(): i32 {
    return this[7].toI32();
  }

  get maxStamina(): i32 {
    return this[8].toI32();
  }

  get element(): i32 {
    return this[9].toI32();
  }

  get subclass(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MeralManager__getMeralByTypeResultValue0Struct extends ethereum.Tuple {
  get cmId(): BigInt {
    return this[0].toBigInt();
  }

  get elf(): BigInt {
    return this[1].toBigInt();
  }

  get xp(): BigInt {
    return this[2].toBigInt();
  }

  get hp(): i32 {
    return this[3].toI32();
  }

  get maxHp(): i32 {
    return this[4].toI32();
  }

  get atk(): i32 {
    return this[5].toI32();
  }

  get def(): i32 {
    return this[6].toI32();
  }

  get spd(): i32 {
    return this[7].toI32();
  }

  get maxStamina(): i32 {
    return this[8].toI32();
  }

  get element(): i32 {
    return this[9].toI32();
  }

  get subclass(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MeralManager extends ethereum.SmartContract {
  static bind(address: Address): MeralManager {
    return new MeralManager("MeralManager", address);
  }

  allMerals(param0: BigInt): MeralManager__allMeralsResult {
    let result = super.call(
      "allMerals",
      "allMerals(uint256):(uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MeralManager__allMeralsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toI32(),
      result[10].toI32(),
      result[11].toI32()
    );
  }

  try_allMerals(
    param0: BigInt
  ): ethereum.CallResult<MeralManager__allMeralsResult> {
    let result = super.tryCall(
      "allMerals",
      "allMerals(uint256):(uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MeralManager__allMeralsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toI32(),
        value[10].toI32(),
        value[11].toI32()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIdFromType(_type: BigInt, _tokenId: BigInt): BigInt {
    let result = super.call(
      "getIdFromType",
      "getIdFromType(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_type),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getIdFromType(
    _type: BigInt,
    _tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIdFromType",
      "getIdFromType(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_type),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMeralByContractAndTokenId(
    contractAddress: Address,
    _tokenId: BigInt
  ): MeralManager__getMeralByContractAndTokenIdResultValue0Struct {
    let result = super.call(
      "getMeralByContractAndTokenId",
      "getMeralByContractAndTokenId(address,uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return changetype<
      MeralManager__getMeralByContractAndTokenIdResultValue0Struct
    >(result[0].toTuple());
  }

  try_getMeralByContractAndTokenId(
    contractAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<
    MeralManager__getMeralByContractAndTokenIdResultValue0Struct
  > {
    let result = super.tryCall(
      "getMeralByContractAndTokenId",
      "getMeralByContractAndTokenId(address,uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MeralManager__getMeralByContractAndTokenIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMeralById(_id: BigInt): MeralManager__getMeralByIdResultValue0Struct {
    let result = super.call(
      "getMeralById",
      "getMeralById(uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return changetype<MeralManager__getMeralByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMeralById(
    _id: BigInt
  ): ethereum.CallResult<MeralManager__getMeralByIdResultValue0Struct> {
    let result = super.tryCall(
      "getMeralById",
      "getMeralById(uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MeralManager__getMeralByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMeralByType(
    _type: BigInt,
    _tokenId: BigInt
  ): MeralManager__getMeralByTypeResultValue0Struct {
    let result = super.call(
      "getMeralByType",
      "getMeralByType(uint256,uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_type),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return changetype<MeralManager__getMeralByTypeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMeralByType(
    _type: BigInt,
    _tokenId: BigInt
  ): ethereum.CallResult<MeralManager__getMeralByTypeResultValue0Struct> {
    let result = super.tryCall(
      "getMeralByType",
      "getMeralByType(uint256,uint256):((uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16,uint16,uint8,uint8,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_type),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MeralManager__getMeralByTypeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getTokenIdFromId(_id: BigInt): BigInt {
    let result = super.call(
      "getTokenIdFromId",
      "getTokenIdFromId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_getTokenIdFromId(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenIdFromId",
      "getTokenIdFromId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTypeByContract(contractAddress: Address): BigInt {
    let result = super.call(
      "getTypeByContract",
      "getTypeByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );

    return result[0].toBigInt();
  }

  try_getTypeByContract(contractAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTypeByContract",
      "getTypeByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contractAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTypeFromId(_id: BigInt): BigInt {
    let result = super.call(
      "getTypeFromId",
      "getTypeFromId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_getTypeFromId(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTypeFromId",
      "getTypeFromId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVerifiedOwner(_id: BigInt): Address {
    let result = super.call(
      "getVerifiedOwner",
      "getVerifiedOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toAddress();
  }

  try_getVerifiedOwner(_id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVerifiedOwner",
      "getVerifiedOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gmAddresses(param0: Address): boolean {
    let result = super.call("gmAddresses", "gmAddresses(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_gmAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("gmAddresses", "gmAddresses(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  meralContracts(param0: BigInt): Address {
    let result = super.call(
      "meralContracts",
      "meralContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_meralContracts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "meralContracts",
      "meralContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  meralOwners(param0: BigInt): Address {
    let result = super.call("meralOwners", "meralOwners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_meralOwners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "meralOwners",
      "meralOwners(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  meralType(param0: Address): BigInt {
    let result = super.call("meralType", "meralType(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_meralType(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("meralType", "meralType(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  typeCounter(): BigInt {
    let result = super.call("typeCounter", "typeCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_typeCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("typeCounter", "typeCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorsAddresses(param0: Address): boolean {
    let result = super.call(
      "validatorsAddresses",
      "validatorsAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_validatorsAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorsAddresses",
      "validatorsAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddGMCall extends ethereum.Call {
  get inputs(): AddGMCall__Inputs {
    return new AddGMCall__Inputs(this);
  }

  get outputs(): AddGMCall__Outputs {
    return new AddGMCall__Outputs(this);
  }
}

export class AddGMCall__Inputs {
  _call: AddGMCall;

  constructor(call: AddGMCall) {
    this._call = call;
  }

  get _gm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get add(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddGMCall__Outputs {
  _call: AddGMCall;

  constructor(call: AddGMCall) {
    this._call = call;
  }
}

export class AddValidatorsCall extends ethereum.Call {
  get inputs(): AddValidatorsCall__Inputs {
    return new AddValidatorsCall__Inputs(this);
  }

  get outputs(): AddValidatorsCall__Outputs {
    return new AddValidatorsCall__Outputs(this);
  }
}

export class AddValidatorsCall__Inputs {
  _call: AddValidatorsCall;

  constructor(call: AddValidatorsCall) {
    this._call = call;
  }

  get _validators(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get add(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddValidatorsCall__Outputs {
  _call: AddValidatorsCall;

  constructor(call: AddValidatorsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeCMIDCall extends ethereum.Call {
  get inputs(): ChangeCMIDCall__Inputs {
    return new ChangeCMIDCall__Inputs(this);
  }

  get outputs(): ChangeCMIDCall__Outputs {
    return new ChangeCMIDCall__Outputs(this);
  }
}

export class ChangeCMIDCall__Inputs {
  _call: ChangeCMIDCall;

  constructor(call: ChangeCMIDCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cmId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeCMIDCall__Outputs {
  _call: ChangeCMIDCall;

  constructor(call: ChangeCMIDCall) {
    this._call = call;
  }
}

export class ChangeELFCall extends ethereum.Call {
  get inputs(): ChangeELFCall__Inputs {
    return new ChangeELFCall__Inputs(this);
  }

  get outputs(): ChangeELFCall__Outputs {
    return new ChangeELFCall__Outputs(this);
  }
}

export class ChangeELFCall__Inputs {
  _call: ChangeELFCall;

  constructor(call: ChangeELFCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get offset(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get add(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ChangeELFCall__Outputs {
  _call: ChangeELFCall;

  constructor(call: ChangeELFCall) {
    this._call = call;
  }
}

export class ChangeElementCall extends ethereum.Call {
  get inputs(): ChangeElementCall__Inputs {
    return new ChangeElementCall__Inputs(this);
  }

  get outputs(): ChangeElementCall__Outputs {
    return new ChangeElementCall__Outputs(this);
  }
}

export class ChangeElementCall__Inputs {
  _call: ChangeElementCall;

  constructor(call: ChangeElementCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _element(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ChangeElementCall__Outputs {
  _call: ChangeElementCall;

  constructor(call: ChangeElementCall) {
    this._call = call;
  }
}

export class ChangeHPCall extends ethereum.Call {
  get inputs(): ChangeHPCall__Inputs {
    return new ChangeHPCall__Inputs(this);
  }

  get outputs(): ChangeHPCall__Outputs {
    return new ChangeHPCall__Outputs(this);
  }
}

export class ChangeHPCall__Inputs {
  _call: ChangeHPCall;

  constructor(call: ChangeHPCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get offset(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get add(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ChangeHPCall__Outputs {
  _call: ChangeHPCall;

  constructor(call: ChangeHPCall) {
    this._call = call;
  }
}

export class ChangeMaxCall extends ethereum.Call {
  get inputs(): ChangeMaxCall__Inputs {
    return new ChangeMaxCall__Inputs(this);
  }

  get outputs(): ChangeMaxCall__Outputs {
    return new ChangeMaxCall__Outputs(this);
  }
}

export class ChangeMaxCall__Inputs {
  _call: ChangeMaxCall;

  constructor(call: ChangeMaxCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxHp(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _maxStamina(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ChangeMaxCall__Outputs {
  _call: ChangeMaxCall;

  constructor(call: ChangeMaxCall) {
    this._call = call;
  }
}

export class ChangeMeralOwnershipCall extends ethereum.Call {
  get inputs(): ChangeMeralOwnershipCall__Inputs {
    return new ChangeMeralOwnershipCall__Inputs(this);
  }

  get outputs(): ChangeMeralOwnershipCall__Outputs {
    return new ChangeMeralOwnershipCall__Outputs(this);
  }
}

export class ChangeMeralOwnershipCall__Inputs {
  _call: ChangeMeralOwnershipCall;

  constructor(call: ChangeMeralOwnershipCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeMeralOwnershipCall__Outputs {
  _call: ChangeMeralOwnershipCall;

  constructor(call: ChangeMeralOwnershipCall) {
    this._call = call;
  }
}

export class ChangeStatsCall extends ethereum.Call {
  get inputs(): ChangeStatsCall__Inputs {
    return new ChangeStatsCall__Inputs(this);
  }

  get outputs(): ChangeStatsCall__Outputs {
    return new ChangeStatsCall__Outputs(this);
  }
}

export class ChangeStatsCall__Inputs {
  _call: ChangeStatsCall;

  constructor(call: ChangeStatsCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _atk(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _def(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _spd(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ChangeStatsCall__Outputs {
  _call: ChangeStatsCall;

  constructor(call: ChangeStatsCall) {
    this._call = call;
  }
}

export class ChangeXPCall extends ethereum.Call {
  get inputs(): ChangeXPCall__Inputs {
    return new ChangeXPCall__Inputs(this);
  }

  get outputs(): ChangeXPCall__Outputs {
    return new ChangeXPCall__Outputs(this);
  }
}

export class ChangeXPCall__Inputs {
  _call: ChangeXPCall;

  constructor(call: ChangeXPCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get offset(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get add(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ChangeXPCall__Outputs {
  _call: ChangeXPCall;

  constructor(call: ChangeXPCall) {
    this._call = call;
  }
}

export class MintMeralCall extends ethereum.Call {
  get inputs(): MintMeralCall__Inputs {
    return new MintMeralCall__Inputs(this);
  }

  get outputs(): MintMeralCall__Outputs {
    return new MintMeralCall__Outputs(this);
  }
}

export class MintMeralCall__Inputs {
  _call: MintMeralCall;

  constructor(call: MintMeralCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintMeralCall__Outputs {
  _call: MintMeralCall;

  constructor(call: MintMeralCall) {
    this._call = call;
  }
}

export class RegisterContractCall extends ethereum.Call {
  get inputs(): RegisterContractCall__Inputs {
    return new RegisterContractCall__Inputs(this);
  }

  get outputs(): RegisterContractCall__Outputs {
    return new RegisterContractCall__Outputs(this);
  }
}

export class RegisterContractCall__Inputs {
  _call: RegisterContractCall;

  constructor(call: RegisterContractCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterContractCall__Outputs {
  _call: RegisterContractCall;

  constructor(call: RegisterContractCall) {
    this._call = call;
  }
}

export class RegisterMeralCall extends ethereum.Call {
  get inputs(): RegisterMeralCall__Inputs {
    return new RegisterMeralCall__Inputs(this);
  }

  get outputs(): RegisterMeralCall__Outputs {
    return new RegisterMeralCall__Outputs(this);
  }
}

export class RegisterMeralCall__Inputs {
  _call: RegisterMeralCall;

  constructor(call: RegisterMeralCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _cmId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _elf(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _hp(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _atk(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _def(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _spd(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get _element(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get _subclass(): i32 {
    return this._call.inputValues[9].value.toI32();
  }
}

export class RegisterMeralCall__Outputs {
  _call: RegisterMeralCall;

  constructor(call: RegisterMeralCall) {
    this._call = call;
  }
}

export class RevertMeralCall extends ethereum.Call {
  get inputs(): RevertMeralCall__Inputs {
    return new RevertMeralCall__Inputs(this);
  }

  get outputs(): RevertMeralCall__Outputs {
    return new RevertMeralCall__Outputs(this);
  }
}

export class RevertMeralCall__Inputs {
  _call: RevertMeralCall;

  constructor(call: RevertMeralCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevertMeralCall__Outputs {
  _call: RevertMeralCall;

  constructor(call: RevertMeralCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
